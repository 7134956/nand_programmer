# Copyright (C) 2020 NANDO authors
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3.

APP_NAME=app_fw

SRC_DIR=./
USB_DIR=../CherryUSB/
OBJ_DIR=obj
LIB_DIR=../vendor/
INCLUDE_DIR=../
TOOLCHAIN=riscv-none-embed-
APP_1=$(OBJ_DIR)/$(APP_NAME)_1
APP_2=$(OBJ_DIR)/$(APP_NAME)_2

SPL_PATH=$(LIB_DIR)
SPL_DEVICE_SUPPORT_PATH=$(SPL_PATH)User/
SPL_CORE_SUPPORT=$(SPL_PATH)Core/
SPL_PERIPH_PATH=$(SPL_PATH)Peripheral/
SPL_LIB=ch32v30x
SPL_CONFIG_FILE=$(SPL_PATH)User/ch32v30x_conf.h

CC=$(TOOLCHAIN)gcc.exe
OBJCOPY=$(TOOLCHAIN)objcopy.exe
OBJDUMP=$(TOOLCHAIN)objdump.exe
SIZE=$(TOOLCHAIN)size.exe

INCLUDES+=-I$(INCLUDE_DIR)
INCLUDES+=-I$(SPL_CORE_SUPPORT)
INCLUDES+=-I$(SPL_DEVICE_SUPPORT_PATH)
INCLUDES+=-I$(SPL_PATH)
INCLUDES+=-I$(SPL_PERIPH_PATH)inc
INCLUDES+=-I$(SRC_DIR)
INCLUDES+=-I$(USB_DIR)
INCLUDES+=-I$(USB_DIR)common
INCLUDES+=-I$(USB_DIR)core
INCLUDES+=-I$(USB_DIR)port/ch32
INCLUDES+=-I$(USB_DIR)class/cdc

CFLAGS=-g -Wall -Werror -Wunused -Wuninitialized -Os
CFLAGS+=$(INCLUDES) -MMD -MP
CFLAGS+=-ffunction-sections -fdata-sections
CFLAGS+=-march=rv32imafc -mabi=ilp32f -msmall-data-limit=8 -mno-save-restore
CFLAGS+=-DCONFIG_USB_HS

LDFLAGS_1=-march=rv32imafc -mabi=ilp32f -Wl,--gc-sections -Wl,-Map=$(APP_1).map -nostartfiles
LDFLAGS_2=-march=rv32imafc -mabi=ilp32f -Wl,--gc-sections -Wl,-Map=$(APP_2).map -nostartfiles

vpath %.c $(SRC_DIR) $(SPL_DEVICE_SUPPORT_PATH) $(USB_DIR) $(USB_DIR)class/cdc $(USB_DIR)core $(USB_DIR)port/ch32
vpath %.s $(SRC_DIR)

STARTUP=startup_ch32v30x_D8C.S
USB_SRCS=usbd_cdc.c usbd_core.c usb_dc_usbhs.c

SRCS=main.c system_ch32v30x.c syscalls.c fsmc_nand.c led.c uart.c jtag.c \
  clock.c cdc.c nand_programmer.c nand_bad_block.c flash.c spi_flash.c \
  $(USB_SRCS)

OBJS=$(addprefix $(OBJ_DIR)/,$(SRCS:.c=.o)) \
  $(addprefix $(OBJ_DIR)/,$(STARTUP:.s=.o))
DEPS=$(OBJS:%.o=%.d)

LINKER_SCRIPT_1=$(SRC_DIR)ch32_flash_1.ld
LINKER_SCRIPT_2=$(SRC_DIR)ch32_flash_2.ld

all: lib dirs $(APP_1).elf $(APP_2).elf

lib:
	$(MAKE) -C $(SPL_PATH)

dirs:
	if not exist $(OBJ_DIR) mkdir $(OBJ_DIR)

$(APP_1).elf: $(OBJS)
	$(CC) $(LDFLAGS_1) -o $@ $^ -L$(SPL_PATH) -l$(SPL_LIB) \
	  -T$(LINKER_SCRIPT_1)
	$(OBJCOPY) --pad-to 0x00022000 -O ihex $(APP_1).elf $(APP_1).hex
	$(OBJCOPY) -O binary $(APP_1).elf $(APP_1).bin
	$(OBJDUMP) -St $(APP_1).elf > $(APP_1).lst
	$(SIZE) $(APP_1).elf

$(APP_2).elf: $(OBJS)
	$(CC) $(LDFLAGS_2) -o $@ $^ -L$(SPL_PATH) -l$(SPL_LIB) \
	  -T$(LINKER_SCRIPT_2)
	$(OBJCOPY) --pad-to 0x00040000 -O ihex $(APP_2).elf $(APP_2).hex
	$(OBJCOPY) -O binary $(APP_2).elf $(APP_2).bin
	$(OBJDUMP) -St $(APP_2).elf > $(APP_2).lst
	$(SIZE) $(APP_2).elf

$(OBJ_DIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@ 

$(OBJ_DIR)/%.o: %.s
	$(CC) -c $(CFLAGS) $< -o $@

-include $(DEPS)

clean:
	if exist $(OBJ_DIR) rd /s /q $(OBJ_DIR)	

distclean: clean
	$(MAKE) -C $(SPL_PATH) clean
